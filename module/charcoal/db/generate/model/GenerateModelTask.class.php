<?php
/**
* タスク
*
* PHP version 5
*
* @package    renderers
* @author     stk2k <stk2k@sazysoft.com>
* @copyright  2008 stk2k, sazysoft
*/

class GenerateModelTask extends Charcoal_Task
{
    const DIR_MODE        = '666';
    const SPACE_COUNT     = 30;

    /**
     * process event
     *
     * @param Charcoal_IEventContext $context
     *
     * @return boolean|Charcoal_Boolean
     */
    public function processEvent( $context )
    {
        /** @var GenerateModelEvent $event */
        $event   = $context->getEvent();

        // get event parameters
        $db_name       = $event->getDatabase();
        $table_name    = $event->getTable();
        $out_dir       = $event->getTargetDir();

        $entity = Charcoal_System::pascalCase( $table_name );
        $config_key = Charcoal_System::snakeCase( $table_name );

        $table_model_class_name = "{$entity}TableModel";
        $table_dto_class_name = "{$entity}TableDTO";
        $listing_dto_class_name = "{$entity}ListingDTO";

        /** @var Charcoal_SmartGateway $gw */
        $gw = $context->getComponent( 'smart_gateway@:charcoal:db' );

        //=======================================
        // Mmake output directory
        //=======================================
        $out_dir = $this->prepareOutputDirectory( $out_dir );

        //=======================================
        // confirm if the table exists
        //=======================================
        $sql = "SELECT count(*) FROM information_schema.COLUMNS WHERE TABLE_NAME = ? AND TABLE_SCHEMA = ? ";
        $params = array( $table_name, $db_name );
        $count = $gw->queryValue( NULL, $sql, $params );

        if ( $count < 1 ){
            print "[ERROR] Specified table '$table_name' does not exist in schema: '$db_name'. Please check your database settings." . PHP_EOL;
            return b(true);
        }

        //=======================================
        // Retrieve column information
        //=======================================
        $sql = "SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_KEY, COLUMN_DEFAULT, EXTRA, COLUMN_COMMENT ";
        $sql .= " FROM information_schema.COLUMNS WHERE TABLE_NAME = ? AND TABLE_SCHEMA = ? ";
        $params = array( $table_name, $db_name );
        $colmn_attr_list = $gw->query( NULL, $sql, $params );

        //=======================================
        // Genarate  table model file
        //=======================================

        $this->generateTableModelFile( $table_name, $colmn_attr_list, $table_model_class_name, $table_dto_class_name, $out_dir );

        //=======================================
        // Genarate table DTO file
        //=======================================

        $this->generateTableDtolFile( $table_name, $colmn_attr_list, $table_dto_class_name, $out_dir );

        //=======================================
        // Genarate listing DTO file
        //=======================================

        $this->generateListingDtolFile( $table_name, $colmn_attr_list, $listing_dto_class_name, $out_dir );

        //=======================================
        // Genarate  config file
        //=======================================

        $this->generateTableConfigFile( $table_name, $table_model_class_name, $config_key, $out_dir );

        return b(true);
    }

    /**
     * prepare output directory
     *
     * @param string $out_dir
     *
     * @return Charcoal_File
     */
    private function prepareOutputDirectory( $out_dir )
    {
        $out_dir = new Charcoal_File( $out_dir );

        $out_dir->makeDirectory( self::DIR_MODE );
    }

    /**
     * generate table model file
     *
     * @param string $table_name
     * @param array $colmn_attr_list
     * @param string $table_model_class_name
     * @param string $table_dto_class_name
     * @param string $out_dir
     */
    private function generateTableModelFile( $table_name, $colmn_attr_list, $table_model_class_name, $table_dto_class_name, $out_dir )
    {
        $lines = NULL;

        $lines[] = "<?php";
        $lines[] = "/**";
        $lines[] = " *   (Auto Generated Class)";
        $lines[] = " *   {$table_model_class_name} class";
        $lines[] = " *   ";
        $lines[] = " *   this is a table mondel class for the DB table: $table_name";
        $lines[] = " *   ";
        $lines[] = " *   generated by CharcoalPHP ver." . Charcoal_Framework::getVersion();
        $lines[] = " */";
        $lines[] = "class {$table_model_class_name} extends Charcoal_DefaultTableModel";
        $lines[] = "{";
        $lines[] = "    public \$___table_name      = '{$table_name}';";
        $lines[] = "";

        $conv = Charcoal_EncodingConverter::fromString( $this->getSandbox(), 'DB', 'PHP' );

        foreach( $colmn_attr_list as $colmn_attr ){
            $field     = $colmn_attr['COLUMN_NAME'];
            $type      = $colmn_attr['COLUMN_TYPE'];
            $null      = $colmn_attr['IS_NULLABLE'];
            $key       = $colmn_attr['COLUMN_KEY'];
            $default   = $colmn_attr['COLUMN_DEFAULT'];
            $extra     = $colmn_attr['EXTRA'];
            $comment   = $colmn_attr['COLUMN_COMMENT'];

            $spaces = str_repeat( " ", self::SPACE_COUNT - strlen($field) );

            // make field spec
            $fieldspec = array( '@field', '@type:'.$type );

            $is_nullable = (strtolower($null) == 'yes') ? true : false;
            $has_default = (strlen($default) !== 0) ? true : false;
            $is_primary_key = (strtolower($key) == "pri") ? true : false;
            $is_auto_increment = (strtolower($extra) == 'auto_increment') ? true : false;
            $is_created_date = (strtolower($field) == 'created_date') ? true : false;
            $is_modified_date = (strtolower($field) == 'modified_date') ? true : false;

            if ( $is_nullable ){
                $fieldspec[] = '@notnull';
            }
            if ( $has_default ){
                $fieldspec[] = '@default:' . $default;
            }
            if ( $is_auto_increment ){
                $fieldspec[] = '@serial';
            }
            if ( $is_primary_key ){
                $fieldspec[] = '@pk';
                $fieldspec[] = '@insert:' . ($is_auto_increment ? 'no' : 'value');
                $fieldspec[] = '@update:no';
            }
            elseif ( $is_created_date ){
                $fieldspec[] = '@insert:function[now]';
                $fieldspec[] = '@update:no';
            }
            elseif ( $is_modified_date ){
                $fieldspec[] = '@insert:function[now]';
                $fieldspec[] = '@update:function[now]';
            }
            else{
                $fieldspec[] = '@insert:value';
                $fieldspec[] = '@update:value';
            }
            if ( !empty($comment) ){
                $fieldspec[] = '@comment:' . $conv->convert($comment);
            }

            // make line
            $line = "    public \${$field}{$spaces}= '" . implode(' ', $fieldspec) . "';";

            $lines[] = $line;
        }

        $lines[] = "";
        $lines[] = "    /**";
        $lines[] = "     * returns new DTO";
        $lines[] = "     * ";
        $lines[] = "     * @param array \$values";
        $lines[] = "     * ";
        $lines[] = "     * @return {$table_dto_class_name}";
        $lines[] = "     */";
        $lines[] = "    public function createDTO( \$values = array() )";
        $lines[] = "    {";
        $lines[] = "        return new {$table_dto_class_name}( \$values );";
        $lines[] = "    }";
        $lines[] = "}";

        $file_name = $table_model_class_name . ".class.php";
        $outfile = new Charcoal_File( $file_name, $out_dir );
        Charcoal_FileSystemUtil::outputFile( $outfile, $lines );

        print "{$outfile} was successfully generated." . PHP_EOL;
    }

    /**
     * generate table DTO file
     *
     * @param string $table_name
     * @param array $colmn_attr_list
     * @param string $table_dto_class_name
     * @param string $out_dir
     */
    private function generateTableDtolFile( $table_name, $colmn_attr_list, $table_dto_class_name, $out_dir )
    {
        $lines = NULL;

        $lines[] = "<?php";
        $lines[] = "/**";
        $lines[] = " *   (Auto Generated Class)";
        $lines[] = " *   {$table_dto_class_name} class";
        $lines[] = " *   ";
        $lines[] = " *   this is a table DTO class for the DB table: $table_name";
        $lines[] = " *   ";
        $lines[] = " *   generated by CharcoalPHP ver." . Charcoal_Framework::getVersion();
        $lines[] = " */";
        $lines[] = "class {$table_dto_class_name} extends Charcoal_TableDTO";
        $lines[] = "{";

        foreach( $colmn_attr_list as $colmn_attr ){
            $field     = $colmn_attr['COLUMN_NAME'];
            //$type      = $colmn_attr['COLUMN_TYPE'];
            //$null      = $colmn_attr['IS_NULLABLE'];
            //$key       = $colmn_attr['COLUMN_KEY'];
            //$default   = $colmn_attr['COLUMN_DEFAULT'];
            //$extra     = $colmn_attr['EXTRA'];

            $lines[] = "    public \${$field};";
        }

        $lines[] = "}";

        $file_name = $table_dto_class_name . ".class.php";
        $outfile = new Charcoal_File( $file_name, $out_dir );
        Charcoal_FileSystemUtil::outputFile( $outfile, $lines );

        print "{$outfile} was successfully generated." . PHP_EOL;
    }

    /**
     * generate listing DTO file
     *
     * @param string $table_name
     * @param array $colmn_attr_list
     * @param string $listing_dto_class_name
     * @param string $out_dir
     */
    private function generateListingDtolFile( $table_name, $colmn_attr_list, $listing_dto_class_name, $out_dir )
    {
        $lines = NULL;

        $lines[] = "<?php";
        $lines[] = "/**";
        $lines[] = " *   (Auto Generated Class)";
        $lines[] = " *   {$listing_dto_class_name} class";
        $lines[] = " *   ";
        $lines[] = " *   this is a listing DTO class for the DB table: $table_name";
        $lines[] = " *   ";
        $lines[] = " *   generated by CharcoalPHP ver." . Charcoal_Framework::getVersion();
        $lines[] = " */";
        $lines[] = "class {$listing_dto_class_name} extends Charcoal_DTO";
        $lines[] = "{";

        foreach( $colmn_attr_list as $colmn_attr ){
            $field     = $colmn_attr['COLUMN_NAME'];
            //$type      = $colmn_attr['COLUMN_TYPE'];
            //$null      = $colmn_attr['IS_NULLABLE'];
            //$key       = $colmn_attr['COLUMN_KEY'];
            //$default   = $colmn_attr['COLUMN_DEFAULT'];
            //$extra     = $colmn_attr['EXTRA'];

            $lines[] = "    public \${$field};";
        }

        $lines[] = "}";

        $file_name = $listing_dto_class_name . ".class.php";
        $outfile = new Charcoal_File( $file_name, $out_dir );
        Charcoal_FileSystemUtil::outputFile( $outfile, $lines );

        print "{$outfile} was successfully generated." . PHP_EOL;
    }

    /**
     * generate table model file
     *
     * @param string $table_name
     * @param string $table_model_class_name
     * @param string $config_key
     * @param string $out_dir
     */
    private function generateTableConfigFile( $table_name, $table_model_class_name, $config_key, $out_dir )
    {
        $file_name = $config_key . ".table_model.ini";

        $lines = NULL;

        $lines[] = ";===================================================================";
        $lines[] = "; (Auto Generated File)";
        $lines[] = "; $file_name";
        $lines[] = "; ";
        $lines[] = "; this file is configuration file for the DB table: $table_name";
        $lines[] = "; ";
        $lines[] = "; generated by CharcoalPHP ver." . Charcoal_Framework::getVersion();
        $lines[] = ";===================================================================";
        $lines[] = "";
        $lines[] = "class_name    = {$table_model_class_name}";

        $outfile = new Charcoal_File( $file_name, $out_dir );
        Charcoal_FileSystemUtil::outputFile( $outfile, $lines );

        print "{$outfile} was successfully generated." . PHP_EOL;

    }
}

return __FILE__;